{"version":3,"sources":["api.ts","utils/drawing.ts","game.ts","index.ts"],"names":[],"mappings":";AAgWa,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,IAAA,EAAA,MAAA,KAAA,UAAA,WAAA,OAAA,EAAA,OAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,IAAA,IAAA,KAAA,EAAA,UAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,IAAA,MAAA,KAAA,YAAA,EAAA,MAAA,KAAA,gBAAA,WAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,GAAA,UAAA,GAAA,OAAA,IAAA,EAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,IAAA,IAAA,EAAA,UAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,iBAAA,QAAA,gBAAA,QAAA,cAAA,QAAA,UAAA,QAAA,oBAAA,QAAA,aAAA,QAAA,WAAA,QAAA,WAAA,QAAA,WAAA,QAAA,aAAA,QAAA,UAAA,QAAA,cAAA,QAAA,YAAA,QAAA,oBAAA,EA7VA,QAAA,eAAiB,SAAC,KAIlB,QAAA,YAAc,SAAC,EAAc,GAChC,IAAA,EAAQ,CACV,CACI,IAAK,EAAK,IACV,OAAQ,EAAK,QAEjB,CACI,IAAK,EAAK,IACV,OAAQ,EAAK,OAAS,GAE1B,CACI,IAAK,EAAK,IAAM,EAChB,OAAQ,EAAK,OAAS,GAE1B,CACI,IAAK,EAAK,IAAM,EAChB,OAAQ,EAAK,SAIlB,OAGoC,IAHpC,EAAK,OAAO,SAAA,GACX,OAAA,EAAM,KAAK,SAAA,GAAM,OAAA,EAAK,MAAQ,EAAG,KAC1B,EAAK,SAAW,EAAG,UACf,EAAK,SAAQ,QAOnB,QAAA,cAAgB,SAAC,EAAc,GA+BvB,IA9BX,IA8BE,EAAA,SAAA,GACD,GAGoC,IAHpC,EAAK,OAAO,SAAA,GACX,OAAA,EAAM,KAAK,SAAA,GAAM,OAAA,EAAK,MAAQ,EAAG,KAC1B,EAAK,SAAW,EAAG,UACf,EAAK,SAAQ,OAwRvB,MAAA,CAvRM,OAAA,IALE,EAAA,EAAA,EAAA,CA9BF,CACX,CACI,IAAK,EAAK,IACV,OAAQ,EAAK,QAEjB,CACI,IAAK,EAAK,IAAM,EAChB,OAAQ,EAAK,QAEjB,CACI,IAAK,EAAK,IAAM,EAChB,OAAQ,EAAK,SAIN,CACX,CACI,IAAK,EAAK,IACV,OAAQ,EAAK,QAEjB,CACI,IAAK,EAAK,IACV,OAAQ,EAAK,OAAS,GAE1B,CACI,IAAK,EAAK,IACV,OAAQ,EAAK,OAAS,KAIb,EAAA,EAAA,OAAA,IAAgB,CAAzB,IAAA,EAAA,EAAK,EAAA,IA4RJ,GAAA,WAAA,EAAA,GAAA,OAAA,EAAA,MAnRF,OAAA,GAGE,QAAA,UAAY,SAAC,EAAc,GAC9B,IAAA,EAAQ,CACV,CACI,IAAK,EAAK,IACV,OAAQ,EAAK,QAEjB,CACI,IAAK,EAAK,IAAM,EAChB,OAAQ,EAAK,QAEjB,CACI,IAAK,EAAK,IAAM,EAChB,OAAQ,EAAK,OAAS,GAE1B,CACI,IAAK,EAAK,IAAM,EAChB,OAAQ,EAAK,OAAS,IAI3B,OAGoC,IAHpC,EAAK,OAAO,SAAA,GACX,OAAA,EAAM,KAAK,SAAA,GAAM,OAAA,EAAK,MAAQ,EAAG,KAC1B,EAAK,SAAW,EAAG,UACf,EAAK,SAAQ,QAOnB,QAAA,aAAe,SAAC,EAAc,GAChC,OAAA,GAGE,QAAA,WAAa,SAAC,EAAc,GAC9B,OAAA,GAGE,QAAA,WAAa,SAAC,EAAc,GAC/B,IAAA,EAAQ,CACV,CACI,IAAK,EAAK,IACV,OAAQ,EAAK,QAEjB,CACI,IAAK,EAAK,IAAM,EAChB,OAAQ,EAAK,OAAS,GAE1B,CACI,IAAK,EAAK,IAAM,EAChB,OAAQ,EAAK,OAAS,GAE1B,CACI,IAAK,EAAK,IAAM,EAChB,OAAQ,EAAK,QAEjB,CACI,IAAK,EAAK,IAAM,EAChB,OAAQ,EAAK,OAAQ,GAEzB,CACI,IAAK,EAAK,IAAM,EAChB,OAAQ,EAAK,OAAS,GAE1B,CACI,IAAK,EAAK,IAAM,EAChB,OAAQ,EAAK,OAAS,IAI3B,OAGoC,IAHpC,EAAK,OAAO,SAAA,GACX,OAAA,EAAM,KAAK,SAAA,GAAM,OAAA,EAAK,MAAQ,EAAG,KAC1B,EAAK,SAAW,EAAG,UACf,EAAK,SAAQ,QAOnB,QAAA,WAAa,SAAC,EAAc,GA+ClB,IA9Cb,IA8CI,EAAA,SAAA,GACH,GAGoC,IAHpC,EAAK,OAAO,SAAA,GACX,OAAA,EAAM,KAAK,SAAA,GAAM,OAAA,EAAK,MAAQ,EAAG,KAC1B,EAAK,SAAW,EAAG,UACf,EAAK,SAAQ,OA6IvB,MAAA,CA5IM,OAAA,IALI,EAAA,EAAA,EAAA,CA9CJ,CACX,CACI,IAAK,EAAK,IACV,OAAQ,EAAK,QAEjB,CACI,IAAK,EAAK,IACV,OAAQ,EAAK,OAAS,GAE1B,CACI,IAAK,EAAK,IAAM,EAChB,OAAQ,EAAK,QAEjB,CACI,IAAK,EAAK,IAAM,EAChB,OAAQ,EAAK,OAAS,GAE1B,CACI,IAAK,EAAK,IAAM,EAChB,OAAQ,EAAK,OAAQ,IAId,CACX,CACI,IAAK,EAAK,IACV,OAAQ,EAAK,QAEjB,CACI,IAAK,EAAK,IACV,OAAQ,EAAK,OAAS,GAE1B,CACI,IAAK,EAAK,IAAM,EAChB,OAAQ,EAAK,QAEjB,CACI,IAAK,EAAK,IAAM,EAChB,OAAQ,EAAK,OAAS,GAE1B,CACI,IAAK,EAAK,IAAM,EAChB,OAAQ,EAAK,OAAQ,KAIV,EAAA,EAAA,OAAA,IAAgB,CAAzB,IAAA,EAAA,EAAK,EAAA,IAiJN,GAAA,WAAA,EAAA,GAAA,OAAA,EAAA,MAxIF,OAAA,GAGE,QAAA,aAAe,SAAC,EAAc,GAChC,OAAA,GAIE,QAAA,oBAAsB,SAAC,EAAc,EAAY,EAAc,GAEpE,IAAA,EAAU,EAAK,IAAM,EAEtB,EAAU,IACT,EAAU,GAGV,IAAA,EAAU,EAAK,IAAM,EAEtB,EAAU,IACT,EAAU,GAGV,IAAA,EAAa,EAAK,OAAS,EAE5B,EAAa,IACZ,EAAa,GAGb,IAAA,EAAa,EAAK,OAAS,EAE5B,EAAa,IACZ,EAAa,GAGX,IAAA,EAAqB,CACvB,CACI,IAAK,EACL,OAAQ,EAAK,QAEjB,CACI,IAAK,EACL,OAAQ,EAAK,QAEjB,CACI,IAAK,EAAK,IACV,OAAQ,GAEZ,CACI,IAAK,EAAK,IACV,OAAQ,GAEZ,CACI,IAAK,EACL,OAAQ,GAEZ,CACI,IAAK,EACL,OAAQ,GAEZ,CACI,IAAK,EACL,OAAQ,GAEZ,CACI,IAAK,EACL,OAAQ,IAIT,OAAA,EAAK,OAAO,SAAA,GAAM,OAAA,EAAmB,KAAK,SAAA,GAAM,OAAA,EAAG,MAAQ,EAAG,KAAO,EAAG,SAAW,EAAG,WAAS,IAAI,SAAA,GAAM,OAAA,EAAG,MAG1G,QAAA,UAAY,SAAC,EAAmC,EAAe,GAYxE,EAAQ,UAAY,OACpB,EAAQ,SAAS,EAAG,EAAG,EAAO,IAGrB,QAAA,cAAgB,SAAC,GA4BV,IA3BR,IAAA,EAAmD,EAAO,OAAlD,EAA2C,EAAO,MAA3C,EAAoC,EAAO,QAAlC,EAA2B,EAAO,KAA5B,EAAqB,EAAO,QAAnB,EAAY,EAAO,QAE9D,EAAQ,EAAQ,EAChB,EAAQ,EAAS,EAEf,EADY,EACa,EACzB,EAFY,EAEa,EAE3B,EAAe,MAAM,EAAO,GAAS,KAAK,GAAG,IAAI,SAAC,EAAI,GAChD,IAAA,EAAM,KAAK,MAAM,EAAQ,GACzB,EAAS,EAAQ,EAEhB,MAAA,CACH,GAAI,EACJ,IAAG,EACH,OAAM,EACN,EAAG,EAAU,EAAW,EACxB,EAAG,EAAU,EAAW,EACxB,MAAK,EACL,MAAK,EACL,OAAQ,QAAQ,KAAK,MAAsB,EAAhB,KAAK,WAChC,YAAa,MAML,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAM,CAAd,IAAA,EAAI,EAAA,GACR,EAAK,YAAc,QAAA,oBAAoB,EAAM,EAAM,EAAM,GAGtD,OAAA,GAGE,QAAA,gBAAkB,SAAC,EAAc,GACpC,IAAA,EAAiB,EAAK,YAAY,OAAO,SAAA,GAAc,OAAA,EAAK,GAAY,SAAQ,OAEnF,OAAC,EAAK,QAA6B,IAAnB,KAGX,EAAK,UAAW,EAAiB,GAAK,EAAiB,KAIxD,EAAK,QAGH,QAAA,iBAAmB,SAAC,GAAiB,OAAA,IAAI,QAAa,SAAC,EAAS,GAWrE,IATE,IAAA,EAAO,EAAO,EAAK,IAAI,SAAA,GAAM,OAAA,EAAA,GAAK,MAClC,EAAS,EAAQ,OAMnB,EAAa,EAET,EAAI,EAAG,EAAI,EAAS,IAAK,CACvB,IAAA,EAAO,EAAK,GACZ,EAAU,EAAQ,GAElB,EAAS,QAAA,gBAAgB,EAAM,GACrC,EAAQ,OAAS,EAEjB,GAA0B,OAAO,EAAQ,QAExB,QAAA,eAAe,GAqBpC,EAAQ,CACJ,WAAU,EACV,KAAM,EACN,MAAO,OAAO,QAtCd,IAsC6B,IAAI,SAAC,EAAI,GAAU,OAAA,EAAA,CAAC,GAAU;;ACnWtD,aAAA,IAAA,EAAA,MAAA,KAAA,UAAA,WAAA,OAAA,EAAA,OAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,IAAA,IAAA,KAAA,EAAA,UAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,IAAA,MAAA,KAAA,YAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,QAAA,WAAA,QAAA,SAAA,QAAA,aAAA,EArCb,IAAM,EAA0B,CAC5B,SAAU,OACV,WAAY,QACZ,MAAO,QAGE,QAAA,QAAU,SAAC,EAAmC,GACjD,IAAA,EAAQ,EAAA,EAAA,GACP,GACA,GAGJ,KAAC,EAAS,OAAU,EAAS,MAAS,EAAS,GAAM,EAAS,GACvD,MAAA,IAAI,MAAM,qCAGpB,EAAQ,UAAY,EAAS,MAC7B,EAAQ,KAAU,EAAS,SAAQ,IAAI,EAAS,WAC1C,IAAA,EAAU,EAAQ,YAAY,EAAS,MAAM,MACnD,EAAQ,SAAS,EAAS,KAAM,EAAS,EAAI,EAAS,EAAS,IAGtD,QAAA,SAAW,SAAC,EAAmC,GAChD,IAAA,EAA+B,EAAI,EAAhC,EAA4B,EAAI,EAA7B,EAAyB,EAAI,MAAtB,EAAkB,EAAI,MAEvC,EAAQ,YAF2B,EAAI,SAKvC,EAAQ,QAGZ,EAAQ,UAAY,EACpB,EAAQ,SAAS,EAAG,EAAG,EAAO,IAGrB,QAAA,WAAiC,GAEjC,QAAA,UAAY,SAAC,EAAY,EAAmC,EAAuB,GACtF,IAAA,EAAQ,EAAA,EAAA,GACP,GACA,GAGJ,KAAC,EAAS,OAAU,EAAS,MAAS,EAAS,GAAM,EAAS,GACvD,MAAA,IAAI,MAAM,qCAGhB,QAAA,WAAW,KAAK,SAAA,GAAM,OAAA,EAAG,KAAO,KAChC,QAAA,WAAW,KAAK,CACZ,GAAI,EACJ,OAAQ,EAAS,EAAI,GACrB,OAAQ,EAAS,EAAI,GACrB,KAAM,EAAS,EAAI,IACnB,KAAM,EAAS,EAAI,GACnB,SAAU,IAIlB,EAAQ,UAAY,EAAS,MAC7B,EAAQ,KAAU,EAAS,SAAQ,IAAI,EAAS,WAChD,EAAQ,SAAS,EAAS,KAAM,EAAS,EAAG,EAAS,GACrD,EAAQ,YAAc,OACtB,EAAQ,WAAW,EAAS,EAAI,GAAI,EAAS,EAAI,GAAI,IAAK;;AC5D9D,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IALA,IAAA,EAAA,QAAA,SAGA,EAAA,QAAA,mBAEA,QAAA,QAAe,WACL,IAAA,EAAS,SAAS,eAAe,UACjC,EAAU,EAAO,WAAW,MAE9B,EAAQ,OAAO,WACf,EAAS,OAAO,YACpB,EAAO,MAAQ,EACf,EAAO,OAAS,EAEZ,IAAA,EAAc,CACd,QAAS,EAAQ,EACjB,QAAS,EAAS,EAClB,MAAO,EAAQ,EACf,OAAQ,EAAS,IACjB,KAAM,IACN,QAAS,KAsCV,GAnCH,EAAO,iBAAiB,YAAa,SAAC,GAGU,IAFpC,IAAA,EAAqB,EAAK,QAAjB,EAAY,EAAK,QAEU,EAAA,EAAA,EAAA,EAAA,WAAA,EAAA,EAAA,OAAA,IAAY,CAA9C,IAAA,EAAA,EAAA,GAAE,EAAM,EAAA,OAAE,EAAI,EAAA,KAAE,EAAM,EAAA,OAAE,EAAI,EAAA,KAE9B,EAAO,MAAM,OADd,EAAU,GAAU,EAAU,GAAQ,EAAU,GAAU,EAAU,EAC7C,UAGA,aAKlC,EAAO,iBAAiB,QAAS,SAAC,GAGwB,IAF9C,IAAA,EAAqB,EAAK,QAAjB,EAAY,EAAK,QAEoB,EAAA,EAAA,EAAA,EAAA,WAAA,EAAA,EAAA,OAAA,IAAY,CAAxD,IAAA,EAAA,EAAA,GAAE,EAAM,EAAA,OAAE,EAAI,EAAA,KAAE,EAAM,EAAA,OAAE,EAAI,EAAA,KAAE,EAAQ,EAAA,SACzC,GAAA,EAAU,GAAU,EAAU,GAAQ,EAAU,GAAU,EAAU,EAEnE,YADA,OAMZ,OAAO,iBAAiB,SAAU,WAC9B,EAAQ,OAAO,WACf,EAAS,OAAO,YAChB,EAAO,MAAQ,EACf,EAAO,OAAS,EAChB,EAAY,MAAQ,EACpB,EAAY,OAAS,EAAS,IAC9B,GAAiB,EACjB,EAAO,EAAA,cAAc,KAGrB,EAAD,CAIC,IAAA,EAAO,EAAA,cAAc,GAcrB,GAZQ,OAAO,iBACP,EAAQ,8BAChB,EAAQ,2BACR,EAAQ,0BACR,EAAQ,yBACN,EAAQ,uBAOE,CACZ,KAAI,EACJ,MAAO,GACP,WAAY,IAEZ,GAAiB,EACjB,GAAY,EAMV,EAAkB,SAAlB,EAAmB,GAClB,GAAA,EAMC,OALI,IACA,EAAY,GAEhB,GAAiB,OACjB,WAAW,EAAsB,GAGrC,WAAW,EAAiB,IAG1B,EAAuB,WACjB,IAAA,EAAS,EAAS,KAC1B,EAAA,iBAAiB,GACZ,KAAK,SAAC,GACH,WAAW,WAAM,OAAA,EAAgB,IAAQ,MAIrD,WAAW,EAAsB,GAE3B,IAAA,GAAe,IAAI,MAAO,cAE1B,EAAe,WACjB,GAAiB,EACjB,EAAO,EAAA,cAAc,GACrB,EAAY,CACR,KAAI,EACJ,MAAO,GACP,WAAY,IA4DpB,sBAxDa,SAAP,IACF,GAAY,EACZ,EAAA,UAAU,EAAS,EAAO,MAAO,EAAO,QAIxB,IAFV,IAAA,EAzCC,EAyCC,EAAU,EAAA,WAEF,GAFS,EAAA,MAET,GAAA,EAFe,EAAA,KAEf,EAAA,EAAA,OAAA,IAAM,CAAd,IAAA,EAAI,EAAA,GACR,EAAA,SAAS,EAAS,GAGtB,EAAA,QAAQ,EAAS,CACb,KAAM,eAAe,EACrB,EAAG,EAAQ,EACX,EAAG,EAAS,KAGhB,EAAA,QAAQ,EAAS,CACb,KAAM,eACN,EAAG,EAAQ,EACX,EAAG,EAAS,GACZ,SAAU,SASd,EAAA,UAAU,EAAG,EAAS,CAClB,KAAM,QACN,EAAW,EAAR,EAAY,EACf,EAAY,EAAT,EAAa,IACjB,GAUH,EAAA,QAAQ,EAAS,CACb,KAAM,kBAAkB,EACxB,EAAG,EAAQ,EACX,EAAY,EAAT,EAAa,KAGpB,GAAY,EAEZ,WAAW,WACP,sBAAsB,IACvB;;AC9KX,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAFA,IAAA,EAAA,EAAA,QAAA,WAEA,OAAO,iBAAiB,OAAQ,EAAA","file":"src.a19be5b1.js","sourceRoot":"..\\src","sourcesContent":["import { Cell } from \"./models/Cell\";\r\nimport { GridOptions } from \"./models/GridOptions\";\r\n\r\nexport const detectPatterns = (cell: Cell) => {\r\n\r\n}\r\n\r\nexport const detectBlock = (grid: Cell[], cell: Cell) => {\r\n    const cells = [\r\n        {\r\n            row: cell.row,\r\n            column: cell.column\r\n        },\r\n        {\r\n            row: cell.row,\r\n            column: cell.column - 1\r\n        },\r\n        {\r\n            row: cell.row - 1,\r\n            column: cell.column - 1\r\n        },\r\n        {\r\n            row: cell.row - 1,\r\n            column: cell.column\r\n        },\r\n    ]\r\n\r\n    if(grid.filter(cell => \r\n        cells.some(ce => cell.row === ce.row \r\n            && cell.column === ce.column) \r\n                && cell.active).length === 4) {\r\n        return true;\r\n    }\r\n    \r\n    return false;\r\n}\r\n\r\nexport const detectBlinker = (grid: Cell[], cell: Cell) => {\r\n    const cells1 = [\r\n        {\r\n            row: cell.row,\r\n            column: cell.column\r\n        },\r\n        {\r\n            row: cell.row - 1,\r\n            column: cell.column\r\n        },\r\n        {\r\n            row: cell.row - 2,\r\n            column: cell.column\r\n        }\r\n    ]\r\n\r\n    const cells2 = [\r\n        {\r\n            row: cell.row,\r\n            column: cell.column\r\n        },\r\n        {\r\n            row: cell.row,\r\n            column: cell.column - 1\r\n        },\r\n        {\r\n            row: cell.row,\r\n            column: cell.column - 2\r\n        }\r\n    ]\r\n\r\n    for(let cells of [cells1, cells2]) {\r\n        if(grid.filter(cell => \r\n            cells.some(ce => cell.row === ce.row \r\n                && cell.column === ce.column) \r\n                    && cell.active).length === 3) {\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    return false;\r\n}\r\n\r\nexport const detectTub = (grid: Cell[], cell: Cell) => {\r\n    const cells = [\r\n        {\r\n            row: cell.row,\r\n            column: cell.column\r\n        },\r\n        {\r\n            row: cell.row - 2,\r\n            column: cell.column\r\n        },\r\n        {\r\n            row: cell.row - 1,\r\n            column: cell.column - 1\r\n        },\r\n        {\r\n            row: cell.row - 1,\r\n            column: cell.column + 1\r\n        }\r\n    ]\r\n\r\n    if(grid.filter(cell => \r\n        cells.some(ce => cell.row === ce.row \r\n            && cell.column === ce.column) \r\n                && cell.active).length === 4) {\r\n        return true;\r\n    }\r\n    \r\n    return false;\r\n}\r\n\r\nexport const detectPulsar = (grid: Cell[], cell: Cell) => {\r\n    return false;\r\n}\r\n\r\nexport const detectToad = (grid: Cell[], cell: Cell) => {\r\n    return false;\r\n}\r\n\r\nexport const detectLoaf = (grid: Cell[], cell: Cell) => {\r\n    const cells = [\r\n        {\r\n            row: cell.row,\r\n            column: cell.column\r\n        },\r\n        {\r\n            row: cell.row - 1,\r\n            column: cell.column - 1\r\n        },\r\n        {\r\n            row: cell.row - 2,\r\n            column: cell.column - 2\r\n        },\r\n        {\r\n            row: cell.row - 3,\r\n            column: cell.column\r\n        },\r\n        {\r\n            row: cell.row - 3,\r\n            column: cell.column -1\r\n        },\r\n        {\r\n            row: cell.row - 1,\r\n            column: cell.column + 1\r\n        },\r\n        {\r\n            row: cell.row - 2,\r\n            column: cell.column + 1\r\n        }\r\n    ]\r\n\r\n    if(grid.filter(cell => \r\n        cells.some(ce => cell.row === ce.row \r\n            && cell.column === ce.column) \r\n                && cell.active).length === 7) {\r\n        return true;\r\n    }\r\n    \r\n    return false;\r\n}\r\n\r\nexport const detectBoat = (grid: Cell[], cell: Cell) => {\r\n    const cells1 = [\r\n        {\r\n            row: cell.row,\r\n            column: cell.column\r\n        },\r\n        {\r\n            row: cell.row,\r\n            column: cell.column - 1\r\n        },\r\n        {\r\n            row: cell.row - 1,\r\n            column: cell.column\r\n        },\r\n        {\r\n            row: cell.row - 1,\r\n            column: cell.column - 2\r\n        },\r\n        {\r\n            row: cell.row - 2,\r\n            column: cell.column -1\r\n        }\r\n    ]\r\n\r\n    const cells2 = [\r\n        {\r\n            row: cell.row,\r\n            column: cell.column\r\n        },\r\n        {\r\n            row: cell.row,\r\n            column: cell.column - 1\r\n        },\r\n        {\r\n            row: cell.row - 1,\r\n            column: cell.column\r\n        },\r\n        {\r\n            row: cell.row - 1,\r\n            column: cell.column - 2\r\n        },\r\n        {\r\n            row: cell.row - 2,\r\n            column: cell.column -1\r\n        }\r\n    ]\r\n\r\n    for(const cells of [cells1, cells2]) {\r\n        if(grid.filter(cell => \r\n            cells.some(ce => cell.row === ce.row \r\n                && cell.column === ce.column) \r\n                    && cell.active).length === 5) {\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    return false;\r\n}\r\n\r\nexport const detectGlider = (grid: Cell[], cell: Cell) => {\r\n    return false;\r\n}\r\n\r\n\r\nexport const getNeighborIndicies = (grid: Cell[], cell: Cell, rows: number, columns: number) => {\r\n\r\n    let prevRow = cell.row - 1;\r\n\r\n    if(prevRow < 0) {\r\n        prevRow = rows;\r\n    }\r\n\r\n    let nextRow = cell.row + 1;\r\n\r\n    if(nextRow > rows) {\r\n        nextRow = 0;\r\n    }\r\n\r\n    let prevColumn = cell.column - 1;\r\n\r\n    if(prevColumn < 0) {\r\n        prevColumn = columns;\r\n    }\r\n\r\n    let nextColumn = cell.column + 1;\r\n\r\n    if(nextColumn > columns) {\r\n        nextColumn = 0;\r\n    }\r\n\r\n    const potentialNeighbors = [\r\n        {\r\n            row: nextRow,\r\n            column: cell.column\r\n        },\r\n        {\r\n            row: prevRow,\r\n            column: cell.column\r\n        },\r\n        {\r\n            row: cell.row,\r\n            column: prevColumn,\r\n        },\r\n        {\r\n            row: cell.row,\r\n            column: nextColumn,\r\n        },\r\n        {\r\n            row: nextRow,\r\n            column: nextColumn,\r\n        },\r\n        {\r\n            row: prevRow,\r\n            column: prevColumn,\r\n        },\r\n        {\r\n            row: nextRow,\r\n            column: prevColumn,\r\n        },\r\n        {\r\n            row: prevRow,\r\n            column: nextColumn,\r\n        },\r\n    ]\r\n\r\n    return grid.filter(pr => potentialNeighbors.some(nb => nb.row === pr.row && nb.column === pr.column)).map(pr => pr.id)\r\n}\r\n\r\nexport const drawBoard = (context: CanvasRenderingContext2D, width: number, height: number) => {\r\n    let size = 15;\r\n    let xOffset = 100;\r\n    let yOffset = 100;\r\n    let rows = 50;\r\n    let columns = 50;\r\n    let borderWidth = 1;\r\n    const newSize = borderWidth + size;\r\n\r\n    //const width = newSize * rows;\r\n    //const height = newSize * rows;\r\n\r\n    context.fillStyle = \"#000\";\r\n    context.fillRect(0, 0, width, height);\r\n}\r\n\r\nexport const initalizeGrid = (options: GridOptions) => {\r\n    const { height, width, columns, rows, xOffset, yOffset } = options;\r\n\r\n    let sizeX = width / columns;\r\n    let sizeY = height / rows;\r\n    let borderWidth = 1;\r\n    const newSizeX = borderWidth + sizeX;\r\n    const newSizeY = borderWidth + sizeY;\r\n\r\n    let grid: Cell[] = Array(rows * columns).fill(0).map((pr, index) => {\r\n        const row = Math.floor(index / rows);\r\n        const column = index % columns;\r\n\r\n        return {\r\n            id: index,\r\n            row,\r\n            column,\r\n            x: xOffset + newSizeX * column,\r\n            y: yOffset + newSizeY * row,\r\n            sizeX,\r\n            sizeY,\r\n            active: Boolean(Math.floor(Math.random() * 2)),\r\n            neighborIds: []\r\n        }\r\n    })\r\n\r\n\r\n\r\n    for(let cell of grid) {\r\n        cell.neighborIds = getNeighborIndicies(grid, cell, rows, columns);\r\n    }\r\n\r\n    return grid;\r\n}\r\n\r\nexport const getNewCellState = (grid: Cell[], cell: Cell) => {\r\n    const aliveNeighbors = cell.neighborIds.filter(neighborId => grid[neighborId].active).length;\r\n        \r\n    if(!cell.active && aliveNeighbors === 3) {\r\n        return true;\r\n    }\r\n    else if(cell.active && (aliveNeighbors < 2 || aliveNeighbors > 3)) {\r\n        return false;\r\n    }\r\n\r\n    return cell.active;\r\n}\r\n\r\nexport const computeNextState = (grid: Cell[]) => new Promise<any>((resolve, reject) => {\r\n    \r\n    const newGrid = [...grid.map(pr => ({...pr}))];\r\n    const length = newGrid.length;\r\n    const lifes: {\r\n        [index: string]: number\r\n    } = {\r\n\r\n    }\r\n    let aliveCells = 0;\r\n\r\n    for(let i = 0; i < length ; i++) {\r\n        const cell = grid[i];\r\n        const newCell = newGrid[i];\r\n\r\n        const active = getNewCellState(grid, cell);\r\n        newCell.active = active;\r\n\r\n        aliveCells = aliveCells + Number(newCell.active);\r\n\r\n        const patterns = detectPatterns(cell);\r\n        // if(detectBlock(grid, newCell)) {\r\n        //     lifes[\"block\"] = (lifes[\"block\"] || 0) + 1;\r\n        // }\r\n        // if(detectBlinker(grid, newCell)) {\r\n        //     lifes[\"blinker\"] = (lifes[\"blinker\"] || 0) + 1;\r\n        // }\r\n        // if(detectTub(grid, newCell)) {\r\n        //     lifes[\"tub\"] = (lifes[\"tub\"] || 0) + 1;\r\n        // }\r\n        // if(detectLoaf(grid, newCell)) {\r\n        //     lifes[\"loaf\"] = (lifes[\"loaf\"] || 0) + 1;\r\n        // }\r\n        // if(detectBoat(grid, newCell)) {\r\n        //     lifes[\"boat\"] = (lifes[\"boat\"] || 0) + 1;\r\n        // }\r\n        // if(detectGlider(grid, newCell)) {\r\n        //     lifes[\"glider\"] = (lifes[\"glider\"] || 0) + 1;\r\n        // }\r\n    }\r\n\r\n    resolve({\r\n        aliveCells,\r\n        grid: newGrid,\r\n        lifes: Object.entries(lifes).map((pr, index) => [index, ...pr] as [number, string, number])\r\n    });\r\n})","import { Cell } from \"../models/Cell\";\r\nimport { StyleOptions } from \"../models/StyleOptions\";\r\nimport { RegisteredAction } from \"../models/RegisteredAction\";\r\n\r\nconst baseStyle: StyleOptions = {\r\n    fontSize: \"30px\",\r\n    fontFamily: \"Arial\",\r\n    color: \"#FFF\",\r\n}\r\n\r\nexport const setText = (context: CanvasRenderingContext2D, options: StyleOptions) => {\r\n    const combined =  {\r\n        ...baseStyle,\r\n        ...options\r\n    }\r\n\r\n    if(!combined.color || !combined.text || !combined.x || !combined.y) {\r\n        throw new Error(\"Missing params: x, y, color, text\");\r\n    }\r\n\r\n    context.fillStyle = combined.color;\r\n    context.font = `${combined.fontSize} ${combined.fontFamily}`;\r\n    const xOffset = context.measureText(combined.text).width;\r\n    context.fillText(combined.text, combined.x - xOffset, combined.y);\r\n}\r\n\r\nexport const drawCell = (context: CanvasRenderingContext2D, cell: Cell) => {\r\n    const { x, y, sizeX, sizeY, active } = cell;\r\n\r\n    let color = \"#FFFFFF99\";\r\n\r\n    if(!active) {\r\n        color = \"#000\";\r\n    }\r\n\r\n    context.fillStyle = color;\r\n    context.fillRect(x, y, sizeX, sizeY);\r\n}\r\n\r\nexport const registered: RegisteredAction[] = []\r\n\r\nexport const setButton = (id: number, context: CanvasRenderingContext2D, options: StyleOptions, onClickCallback: () => void) => {\r\n    const combined =  {\r\n        ...baseStyle,\r\n        ...options\r\n    }\r\n\r\n    if(!combined.color || !combined.text || !combined.x || !combined.y) {\r\n        throw new Error(\"Missing params: x, y, color, text\");\r\n    }\r\n\r\n    if(!registered.some(pr => pr.id === id)) {\r\n        registered.push({\r\n            id: id,\r\n            startX: combined.x - 10,\r\n            startY: combined.y - 35,\r\n            endX: combined.x + 100,\r\n            endY: combined.y + 50,\r\n            callback: onClickCallback\r\n        })\r\n    }\r\n\r\n    context.fillStyle = combined.color;\r\n    context.font = `${combined.fontSize} ${combined.fontFamily}`;\r\n    context.fillText(combined.text, combined.x, combined.y);\r\n    context.strokeStyle = \"#FFF\";\r\n    context.strokeRect(combined.x - 10, combined.y - 35, 100, 50);\r\n}","import { Cell } from \"./models/Cell\";\r\nimport { initalizeGrid, drawBoard, detectBlock, detectBlinker, detectLoaf, detectBoat, detectGlider, detectTub, detectPatterns, computeNextState } from \"./api\";\r\nimport { StyleOptions } from \"./models/StyleOptions\";\r\nimport { RegisteredAction } from \"./models/RegisteredAction\";\r\nimport { setText, drawCell, registered, setButton } from \"./utils/drawing\";\r\n\r\nexport default () => {\r\n    const canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\n    const context = canvas.getContext(\"2d\");\r\n\r\n    let width = window.innerWidth;\r\n    let height = window.innerHeight;\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n\r\n    let gridOptions = {\r\n        xOffset: width / 5,\r\n        yOffset: height / 9,\r\n        width: width / 2,\r\n        height: height / 1.5,\r\n        rows: 100,\r\n        columns: 100\r\n    }\r\n\r\n    canvas.addEventListener(\"mousemove\", (event) => {\r\n        const { clientX, clientY } = event;\r\n        \r\n        for(const { startX, endX, startY, endY } of registered) {\r\n            if(clientX > startX && clientX < endX && clientY > startY && clientY < endY) {\r\n                canvas.style.cursor = \"pointer\";\r\n            }\r\n            else {\r\n                canvas.style.cursor = \"initial\";\r\n            }\r\n        }\r\n    })\r\n\r\n    canvas.addEventListener(\"click\", (event) => {\r\n        const { clientX, clientY } = event;\r\n        \r\n        for(const { startX, endX, startY, endY, callback } of registered) {\r\n            if(clientX > startX && clientX < endX && clientY > startY && clientY < endY) {\r\n                callback();\r\n                return;\r\n            }\r\n        }\r\n    })\r\n\r\n    window.addEventListener(\"resize\", () => {\r\n        width = window.innerWidth;\r\n        height = window.innerHeight;\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        gridOptions.width = width;\r\n        gridOptions.height = height - 200;\r\n        resetTriggered = true;\r\n        grid = initalizeGrid(gridOptions);\r\n    })\r\n\r\n    if(!context) {\r\n        return\r\n    }\r\n\r\n    let grid = initalizeGrid(gridOptions);\r\n\r\n    const dpr = window.devicePixelRatio || 1;\r\n    const bsr = context.webkitBackingStorePixelRatio ||\r\n        context.mozBackingStorePixelRatio ||\r\n        context.msBackingStorePixelRatio ||\r\n        context.oBackingStorePixelRatio ||\r\n          context.backingStorePixelRatio || 1;\r\n\r\n    const state = {\r\n        ready: false\r\n    }\r\n\r\n    let newGrid: any = null;\r\n    let lastState = {\r\n        grid,\r\n        lifes: [],\r\n        aliveCells: 0\r\n    };\r\n    let resetTriggered = false;\r\n    let canUpdate = false;\r\n\r\n    const getLatestState = () => {\r\n        return lastState\r\n    }\r\n\r\n    const tryReplaceState = (state: any) => {\r\n        if(canUpdate) {\r\n            if(!resetTriggered) {\r\n                lastState = state;\r\n            }\r\n            resetTriggered = false;\r\n            setTimeout(computeNextStateLoop, 0);\r\n            return;\r\n        }\r\n        setTimeout(tryReplaceState, 5);    \r\n    }\r\n\r\n    const computeNextStateLoop = () => {\r\n        const { grid } = lastState;\r\n        computeNextState(grid)\r\n            .then((state: any) => {\r\n                setTimeout(() => tryReplaceState(state), 0);\r\n            })\r\n    }\r\n\r\n    setTimeout(computeNextStateLoop, 0);\r\n\r\n    const currentYear  = new Date().getFullYear();\r\n\r\n    const onResetClick = () => {\r\n        resetTriggered = true;\r\n        grid = initalizeGrid(gridOptions);\r\n        lastState = {\r\n            grid,\r\n            lifes: [],\r\n            aliveCells: 0\r\n        };\r\n    }\r\n\r\n    const loop = () => {\r\n        canUpdate = false;\r\n        drawBoard(context, canvas.width, canvas.height);\r\n\r\n        const { aliveCells, lifes, grid } = getLatestState();\r\n\r\n        for(let cell of grid) {\r\n            drawCell(context, cell);\r\n        }\r\n\r\n        setText(context, {\r\n            text: `Alive cells ${aliveCells}`,\r\n            x: width / 5,\r\n            y: height / 10\r\n        })\r\n\r\n        setText(context, {\r\n            text: \"Game of Life\",\r\n            x: width / 2,\r\n            y: height / 10,\r\n            fontSize: \"50px\"\r\n        });\r\n\r\n        // setText(context, {\r\n        //     text: \"Detected lifes\",\r\n        //     x: 1000,\r\n        //     y: 50\r\n        // });\r\n\r\n        setButton(1, context, {\r\n            text: \"Reset\",\r\n            x: width * 2 / 3,\r\n            y: height * 9 / 10,\r\n        }, onResetClick);\r\n\r\n        // for(let [index, name, count] of lifes) {\r\n        //     setText(context, {\r\n        //         text: `${name} ${count}`,\r\n        //         x: 1000,\r\n        //         y: index * 50 + 100\r\n        //     });\r\n        // }\r\n\r\n        setText(context, {\r\n            text: `Józef Podlecki ${currentYear}`,\r\n            x: width / 2,\r\n            y: height * 9 / 10\r\n        });\r\n\r\n        canUpdate = true;\r\n\r\n        setTimeout(() => {\r\n            requestAnimationFrame(loop);\r\n        }, 30)\r\n    }\r\n\r\n    requestAnimationFrame(loop);\r\n}","import init from './game';\r\n\r\nwindow.addEventListener(\"load\", init);"]}